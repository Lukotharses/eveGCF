<?php

/**
 * Addressable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    e-venement
 * @subpackage model
 * @author     Baptiste SIMON <baptiste.simon AT e-glop.net>
 * @author     Ayoub HIDRI <ayoub.hidri AT gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Addressable extends PluginAddressable
{
  public function construct()
  {
    parent::construct();
    $this->_table->getTemplate('Doctrine_Template_Searchable')
      ->getPlugin()
      ->setOption('analyzer',new MySearchAnalyzer());
  }
    
  private function getAccessorById($p_aid) 
  {            
      $uname = __('unknown user');
      
      if ($p_aid) 
      {
          $c = Doctrine::getTable('sfGuardUser')->findOneById($p_aid);    
          if (isset($c))
          {
              $uname = $c->username;
          }          
      }
      
      return $uname;
  }

  public function getLastAccessor()
  {
      return $this->getAccessorById($this->last_accessor_id);      
  }
    
  public function getCreator() 
  {      
      $v = $this->Version[0];

      if (isset($v))
      {
          return $this->getAccessorById($v->last_accessor_id);
      } else {
          return $this->getLastAccessor();
      }
  }  
  
  public function getUpdatedAtIso8601()
  {
    sfApplicationConfiguration::getActive()->loadHelpers(array('Date8601'));
    return format_datetime_iso8601($this->updated_at);
  }
  public function getCreatedAtIso8601()
  {
    sfApplicationConfiguration::getActive()->loadHelpers(array('Date8601'));
    return format_datetime_iso8601($this->created_at);
  }

  public function getJSSlug()
  {
    return str_replace('-','_',$this->slug);
  }
  
  public function getSearchedVersion($v)
  {
    if ( $v <= 1 )
      return NULL;
    
    foreach ( $this->Version as $version )
    if ( $version->version == $v )
      return $version;
    
    return NULL;
  }
  public function getPreviousVersion($v)
  {
    if ( $v <= 1 )
      return NULL;
    
    foreach ( $this->Version as $version )
    if ( $version->version == $v-1 )
      return $version;
    
    return NULL;
  }
  
  // methods stolen from Traceable
  public function preSave($event)
  {
    if ( $this->isModified() )
    {
      if ( sfContext::hasInstance() && sfContext::getInstance()->getUser()->getId() )
      {
        $this->last_accessor_id = sfContext::getInstance()->getUser()->getId();
        $this->automatic = false;
      }
      else
        $this->automatic = true;
      $this->updated_at = date('Y-m-d H:i:s');
    }
    parent::preSave($event);
  }
  
  public function preInsert($event)
  {
    if ( sfContext::hasInstance() && sfContext::getInstance()->getUser()->getId() )
    {
      if ( is_null($this->last_accessor_id) )
        $this->last_accessor_id = sfContext::getInstance()->getUser()->getId();
    }
    else
    {
      $this->last_accessor_id = NULL;
      $this->automatic = true;
    }
    
    if ( is_null($this->created_at) )
      $this->created_at = date('Y-m-d H:i:s');
    parent::preInsert($event);
  }
  
  public function copy($deep = FALSE)
  {
    $t = parent::copy($deep);
    
    $t->updated_at = NULL;
    $t->created_at = NULL;
    $t->last_accessor_id = NULL;
    
    return $t;
  }
}
